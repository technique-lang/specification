procedure :=
    procedure_declaration
    procedure_title?
    procedure_description?
    scope*

procedure_declaration := identifier parameters? ":" signature? NEWLINE

identifier := [a-z][a-z0-9_]*

parameters := "(" variable ("," variable)* ")"
variable := identifier

signature := genus "->" genus 

genus := unit_genus | simple_genus | list_genus | tuple_genus | naked_genus
unit_genus := "()"
simple_genus := forma
list_genus := "[" forma "]"
tuple_genus := "(" forma ("," forma)+ ")"
naked_genus := forma ("," forma)+

forma := [A-Z][a-zA-Z0-9_]*

procedure_title := "#" heading

heading := ANY NEWLINE

procedure_description := paragraph+

paragraph := descriptive+ NEWLINE

descriptive := text | code_inline

text := ANY

code_inline := "{" expression "}"

expression :=
    variable |
    string_literal |
    multiline_literal |
    numeric_literal |
    invocation_call |
    function_call |
    tablet

invocation_call := "<" invocation_target ">" ("(" arguments? ")")?

invocation_target := local_target | external_target
local_target := identifier
external_target := "https://" [a-zA-Z0-9.,?&#%=:/-_]+

function_call := function_name "(" arguments? ")"
function_name := identifier

arguments := expression ("," expression)*

string_literal := "\"" ANY "\""

multiline_literal := "```" language? ANY "```"

language := [a-z]+

numeric_literal := integral | quantity
integral := [0-9]+

quantity := mantissa uncertainty? magnitude? symbol
mantissa := [0-9]+([.][0-9]+)?
uncertainty := ("±" | "+/-") [0-9]+([.][0-9]+)?
magnitude := "x" "10^" [0-9]+ | "×" "10" [⁰⁻⁹]
symbol := [a-zA-Z/°]+

scope := step_block | code_block | attribute_block

step_block := dependent_step | parallel_step

dependent_step := [1-9][0-9]*[.][ ] step_content

parallel_step := [-][ ] step_content

step_content := descriptive+ (dependent_substep+ | parallel_substep+ | scope)?

dependent_substep := [a-hj-km-uwyz][.] substep_content

parallel_substep := [-][ ] substep_content

substep_content := descriptive+ (dependent_subsubstep+ | parallel_subsubstep+ | scope)?

dependent_subsubstep := [ivxl]+[.] subsubstep_content
 
parallel_subsubstep := [-][ ] subsubstep_content

subsubstep_content := descriptive+ scope?

code_block := "{" expression+ "}"

attribute_block := role_attribute | place_attribute
role_attribute := "@" identifier ("+" "@" identifier)*
place_attribute := "#" identifier

tablet := "[" pair (NEWLINE pair)* "]"

pair := label "=" expression

label := "\"" ANY "\""

NEWLINE := "\n"

SPACE := " " | "\t" | "\n"

ANY ; specially defined as any characters but matching lazily so that whatever token follows is excluded
