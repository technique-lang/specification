; A grammar for the Technique procedures language. This is intended to be as
; comprehensive as possible, but there are some flexibilties that the
; reference parser admits that are not necessarily described here.
;
; This is written in the style of a Backus–Naur Form with a few augmentations.
; When specified character classes are in the style of those accepted by
; regular expressions (though characters that are special are not escaped
; here).
;
; the convention adopted here is that names that represent actual types in the
; abstract syntax tree are in Proper Case whereas other definitions (often
; representing variants in enumerations in the implementation) are written in
; snake_case.

NEWLINE := "\n" | "\r\n"

; arbitrary whitespace is allowed betwen most tokens.
SPACE := " " | "\t" | "\n"

; specially defined as any characters but matching lazily, such that whatever
; token or pattern that follows is excluded.
ANY

; A document or file has an optional metadata header, followed by a technique.
Document := Metadata? Technique?

; If present, the document metadata are the magic bytes, followed by an
; optional statement of license and copyright, and an optional indication of
; what template is intended for rendering this technique.
Metadata := magic_line spdx_line? template_line?

magic_line := "%" "technique" "v1" NEWLINE

spdx_line := "!" license copyright? NEWLINE
license := [a-zA-Z0-9.,-_ ()[]]+
copyright := ";" ("©" | "(c)" | "(C)") ANY NEWLINE

template_line := "&" [a-zA-Z0-9.,-]+ NEWLINE

; a technique is either a series of steps, or a procedure (which of course
; can contain steps).
Technique := Scope+ | Procedure+

Procedure :=
    procedure_declaration
    procedure_title?
    procedure_description?
    Scope*

procedure_declaration := Identifier parameters? ":" signature? NEWLINE

Identifier := [a-z][a-z0-9_]*

parameters := "(" variable ("," variable)* ")"
variable := Identifier

signature := Genus "->" Genus

Genus := unit_genus | simple_genus | list_genus | tuple_genus | naked_genus
unit_genus := "()"
simple_genus := Forma
list_genus := "[" Forma "]"
tuple_genus := "(" Forma ("," Forma)+ ")"
naked_genus := Forma ("," Forma)+

Forma := [A-Z][a-zA-Z0-9_]*

procedure_title := "#" heading

heading := ANY NEWLINE

procedure_description := Paragraph+

Paragraph := Descriptive+ NEWLINE

Descriptive := text | code_inline

text := ANY

code_inline := "{" Expression "}"

Expression :=
    variable |
    string_literal |
    multiline_literal |
    numeric_literal |
    Invocation |
    Application |
    tablet

Invocation := "<" invocation_target ">" ("(" arguments? ")")?

invocation_target := local_target | external_target
local_target := Identifier
external_target := "https://" [a-zA-Z0-9.,?&#%=:/-_]+

; a function call
Application := function_name "(" arguments? ")"
function_name := Identifier

arguments := Expression ("," Expression)*

string_literal := "\"" ANY "\""

multiline_literal := "```" language? ANY "```"

language := [a-z]+

numeric_literal := integral | Quantity
integral := [0-9]+

Quantity := mantissa uncertainty? magnitude? symbol
mantissa := [0-9]+([.][0-9]+)?
uncertainty := ("±" | "+/-") [0-9]+([.][0-9]+)?
magnitude := "x" "10^" [0-9]+ | "×" "10" [⁰⁻⁹]
symbol := [a-zA-Z/°]+

Scope := step_block | code_block | Attribute | section_chunk

step_block := dependent_step+ | parallel_step+

dependent_step := [1-9][0-9]*[.][ ] step_content

parallel_step := [-][ ] step_content

step_content := Descriptive+ (dependent_substep+ | parallel_substep+ | Scope)?

dependent_substep := [a-hj-km-uwyz][.] substep_content

parallel_substep := [-][ ] substep_content

substep_content := Descriptive+ (dependent_subsubstep+ | parallel_subsubstep+ | Scope)?

dependent_subsubstep := [ivxl]+[.] subsubstep_content
 
parallel_subsubstep := [-][ ] subsubstep_content

subsubstep_content := Descriptive+ Scope?

; a code block is effectively the same as a code inline; both escape from the
; textual language to being able to write expressions
code_block := "{" NEWLINE Expression+ NEWLINE "}"

Attribute := role_attribute | place_attribute
role_attribute := "@" Identifier ("+" "@" Identifier)*
place_attribute := "#" Identifier

tablet := "[" Pair (NEWLINE Pair)* "]"

Pair := Label "=" Expression

Label := "\"" ANY "\""

; last but not least, procedures can be grouped into sections, marked with
; capital roman numerals.
section_chunk := [IVX]+[.] Descriptive* Scope?
